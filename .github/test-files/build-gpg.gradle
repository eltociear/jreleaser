plugins {
    id 'java-library'
    id 'org.jreleaser'
}

jreleaser {
    gitRootSearch = true
    dryrun = true

    environment {
        properties.put('jdkPathPrefix', 'plugins/jreleaser/build/jdks')
        properties.put('jdkFilePrefix', 'zulu17.32.13-ca-jdk17.0.2')
    }

    project {
        description = 'Release projects quickly and easily with JReleaser'
        longDescription = '''|JReleaser is a release automation tool. Its goal is to simplify creating releases and
          |publishing artifacts to multiple package managers while providing customizable options.
          |JReleaser takes inputs from popular builds tools (Ant, Maven, Gradle) such as JAR files,
          |binary distributions (.zip, .tar), JLink images, or any other file that you‚Äôd like to
          |publish as a Git release on popular Git services such as GitHub, GitLab, or Gitea.
          |Distribution files may additionally be published to be consumed by popular package managers
          |such as Homebrew, Chocolatey, Snapcraft, or get ready to be launched via JBang. Releases
          |may be announced in a variety of channels such as Twitter, Zulip, SDKMAN!, and more.'''.stripMargin('|')
        links {
            homepage = 'https://jreleaser.org'
            faq      = 'https://{{repoHost}}/{{repoOwner}}/{{repoName}}/discussions'
            donation = 'https://opencollective.com/jreleaser'
        }
        authors = ['Andres Almiray']
        license = 'Apache-2.0'
        inceptionYear = '2020'
        stereotype = 'cli'
        screenshot {
            url = 'https://jreleaser.org/images/app-full-release-command.png'
            caption = 'JReleaser in action'
        }
        icon {
            url    = 'https://raw.githubusercontent.com/jreleaser/jreleaser/main/src/media/icon_256x256.png'
            width  = 256
            height = 256
        }
        tags = ['jreleaser', 'release', 'tool', 'java', 'git']
        java {
            mainClass = 'org.jreleaser.cli.Main'
        }
    }

    platform {
        replacements.put('aarch_64', 'aarch64')
    }

    release {
        github {
            overwrite = true
            sign = true
            discussionCategoryName = 'Announcements'
            changelog {
                formatted = 'ALWAYS'
                preset = 'conventional-commits'
                format = '- {{commitShortHash}} {{commitTitle}}'
                contributors {
                    format = '- {{contributorName}}{{#contributorUsernameAsLink}} ({{.}}){{/contributorUsernameAsLink}}'
                }
                labeler {
                    label = 'i18n'
                    title = 'regex:^(?:i18n(?:\\(.*\\))?!?):\\s.*'
                    order = 120
                }
                labeler {
                    label = 'dependencies'
                    title = 'regex:^(?:deps(?:\\(.*\\))?!?):\\s.*'
                    order = 130
                }
                labeler {
                    label = 'allcontributors1'
                    title = 'regex:^docs: update .all-contributorsrc.*'
                    order = -1
                }
                labeler {
                    label = 'allcontributors2'
                    title = 'regex:^docs: update CONTRIBUTORS.md.*'
                    order = -2
                }
                category {
                    title  = 'üåê Translation'
                    key    = 'i18n'
                    order  = 70
                    labels = ['i18n']
                }
                category {
                    title  = '‚öôÔ∏è  Dependencies'
                    key    = 'dependencies'
                    order  = 80
                    labels = ['dependencies']
                }
                category {
                    title  = 'allcontributors'
                    order  = 59
                    labels = ['allcontributors1', 'allcontributors2']
                }
                hide {
                    category('merge')
                    category('allcontributors')
                    contributor('GitHub')
                    contributor('allcontributors')
                }
                replacer {
                    search = 'i18n: '
                }
                replacer {
                    search = 'deps: '
                }
            }
        }
    }

    signing {
        active = 'ALWAYS'
        armored = true
        files = false
    }

    checksum {
        files = false
    }

    assemble {
        archive {
            'jreleaser-archive' {
                active = 'ALWAYS'
                attachPlatform = true
                format('ZIP')
                format('TAR')
                format('TAR_BZ2')
                format('TAR_GZ')
                format('TAR_XZ')
                format('TBZ2')
                format('TGZ')
                format('TXZ')
                fileSet {
                    input = '.'
                    include('VERSION')
                }
            }
        }

        jlink {
            'jreleaser-standalone' {
                active = 'ALWAYS'
                imageName = '{{distributionName}}-{{projectEffectiveVersion}}'
                executable = 'jreleaser'
                jdeps {
                    multiRelease = 'base'
                    ignoreMissingDeps = true
                }
                additionalModuleNames = [
                    'java.security.sasl',
                    'java.security.jgss',
                    'jdk.crypto.cryptoki',
                    'jdk.crypto.ec',
                    'jdk.localedata',
                    'jdk.net',
                    'jdk.security.auth',
                    'jdk.security.jgss'
                ] as Set<String>

                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17Osx/{{jdkFilePrefix}}-macosx_x64/zulu-17.jdk/Contents/Home'
                    platform = 'osx-x86_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17OsxArm/{{jdkFilePrefix}}-macosx_aarch64/zulu-17.jdk/Contents/Home'
                    platform = 'osx-aarch_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17Linux/{{jdkFilePrefix}}-linux_x64'
                    platform = 'linux-x86_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17LinuxArm/{{jdkFilePrefix}}-linux_aarch64'
                    platform = 'linux-aarch_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17LinuxMusl/{{jdkFilePrefix}}-linux_musl_x64'
                    platform = 'linux_musl-x86_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17LinuxMuslArm/{{jdkFilePrefix}}-linux_musl_aarch64'
                    platform = 'linux_musl-aarch_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17Windows/{{jdkFilePrefix}}-win_x64'
                    platform = 'windows-x86_64'
                }
                targetJdk {
                    path = '{{jdkPathPrefix}}/zulu17WindowsArm/{{jdkFilePrefix}}-win_aarch64'
                    platform = 'windows-aarch_64'
                }
                mainJar {
                    path = 'plugins/jreleaser/build/libs/jreleaser-{{projectVersion}}.jar'
                }
                jars {
                    pattern = 'plugins/jreleaser/build/dependencies/flat/*.jar'
                }
            }
        }
    }

    distributions {
        jreleaser {
            flatpak {
                active = 'ALWAYS'
                componentId = 'org.jreleaser.cli'
                developerName = 'JReleaser'
                runtime = 'FREEDESKTOP'
                runtimeVersion = '21.08'
                finishArg('--share=network')
                finishArg('--filesystem=host')
                category('Developer Tools')
                repository {
                    active = 'RELEASE'
                    repoOwner = 'flathub'
                    name = 'org.jreleaser.cli'
                }
            }
            chocolatey {
                active = 'ALWAYS'
                remoteBuild = true
                title = 'JReleaser'
                iconUrl = 'https://rawcdn.githack.com/jreleaser/jreleaser/0934fa1fa3f0bd09c0c8c39fbdeb5df2ce507457/src/media/icon_128x128.png'
                bucket {
                    active = 'RELEASE'
                }
            }
            jbang {
                active = 'ALWAYS'
            }
            macports {
                active = 'ALWAYS'
                category('devel')
                category('java')
                maintainer('@aalmiray')
                repository {
                    active = 'RELEASE'
                    name = 'jreleaser-macports'
                }
            }
            scoop {
                active = 'ALWAYS'
                bucket {
                    active = 'RELEASE'
                }
            }
            sdkman {
                active = 'RELEASE'
            }
            snap {
                active = 'ALWAYS'
                remoteBuild = true
                base = 'core18'
                architecture {
                    buildOn('amd64')
                    buildOn('arm64')
                }
                plugs {
                    'dot-config-files' {
                        attribute('interface', 'personal-files')
                        write('$HOME/.jreleaser')
                        read('$HOME/.gnupg')
                        read('$HOME/.gitconfig')
                        read('$HOME/.config/jgit')
                    }
                }
                localPlug('network')
                localPlug('home')
                localPlug('dot-config-files')
            }
            spec {
                active = 'ALWAYS'
                repository {
                    active = 'RELEASE'
                    name = 'jreleaser-copr'
                }
            }
            artifact {
                path = 'plugins/{{distributionName}}/build/distributions/{{distributionName}}-{{projectVersion}}.zip'
                transform = '{{distributionName}}/{{distributionName}}-{{projectEffectiveVersion}}.zip'
                extraProperties.put('skipSpec', true)
            }
            artifact {
                path = 'plugins/{{distributionName}}/build/distributions/{{distributionName}}-{{projectVersion}}.tar'
                transform = '{{distributionName}}/{{distributionName}}-{{projectEffectiveVersion}}.tar'
                extraProperties.put('skipFlatpak', true)
            }
        }

        'jreleaser-ant-tasks' {
            artifact {
                path = 'plugins/{{distributionName}}/build/distributions/{{distributionName}}-{{projectVersion}}.zip'
                transform = '{{distributionName}}/{{distributionName}}-{{projectEffectiveVersion}}.zip'
            }
        }

        'jreleaser-tool-provider' {
            distributionType = 'SINGLE_JAR'
            artifact {
                path = 'plugins/{{distributionName}}/build/libs/{{distributionName}}-{{projectVersion}}.jar'
                transform = '{{distributionName}}/{{distributionName}}-{{projectEffectiveVersion}}.jar'
            }
        }

        'jreleaser-standalone' {
            appImage {
                active = 'ALWAYS'
                componentId = 'org.jreleaser.cli'
                developerName = 'JReleaser'
                category('Developement')
                repository {
                    active = 'RELEASE'
                    name = 'jreleaser-appimage'
                }
            }
            brew {
                active = 'ALWAYS'
                formulaName = 'jreleaser'
                multiPlatform = true
                repoTap {
                    active = 'RELEASE'
                    commitMessage = 'jreleaser {{tagName}}'
                }
            }
            docker {
                active = 'ALWAYS'
                repository {
                    active = 'RELEASE'
                    commitMessage = 'jreleaser {{tagName}}'
                }
                registries {
                    DEFAULT {
                        username = 'jreleaser'
                    }
                }
                label('org.opencontainers.image.title', 'jreleaser')
                postCommand('VOLUME /workspace')
                specs {
                    slim {
                        imageName('jreleaser/jreleaser-{{dockerSpecName}}:{{tagName}}')
                        imageName('jreleaser/jreleaser-{{dockerSpecName}}:latest')
                        matcher('platform', 'linux-x86_64')
                        preCommand('ARG DEBIAN_FRONTEND=noninteractive')
                        preCommand('ENV TZ=Europe/Zurich')
                        preCommand('RUN apt-get update && apt-get install -y unzip binutils fakeroot rpm')
                    }
                    alpine {
                        imageName('jreleaser/jreleaser-{{dockerSpecName}}:{{tagName}}')
                        imageName('jreleaser/jreleaser-{{dockerSpecName}}:latest')
                        matcher('platform', 'linux_musl-x86_64')
                        preCommand('RUN apk add unzip bash')
                    }
                }
            }
        }
    }

    files {
        artifact {
            path = 'VERSION'
        }
    }

    upload {
        s3 {
            jreleaser {
                active = 'ALWAYS'
            }
        }
    }
}
